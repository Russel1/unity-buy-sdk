namespace <%= namespace %>.SDK {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using <%= namespace %>;
    using <%= namespace %>.SDK;
    using <%= namespace %>.MiniJSON;
    using <%= namespace %>.GraphQL;

    public struct ShippingFields {
        public MailingAddressInput ShippingAddress;
        public string ShippingIdentifier; 

        public ShippingFields(MailingAddressInput shippingAddress, string shippingIdentifier) {
            ShippingIdentifier = shippingIdentifier;
            ShippingAddress = shippingAddress;
        }
    }

    public class CheckoutMutator {
        private ShopifyClient Client;

        /// <summary>
        /// Callback that is invoked whenever the mutation has completed on the server.
        /// </summary>
        private CheckoutMutationCallback DidMutateCheckout;
        private CheckoutPoller Poller;

        public CheckoutMutator(ShopifyClient client, CheckoutMutationCallback mutationCallback) {
            Client = client;
            DidMutateCheckout = mutationCallback;
            Poller = new CheckoutPoller(client, mutationCallback);
        }

        public void CreateCheckout(List<CheckoutLineItemInput> items, CompletionCallback callback) {
            var query = new MutationQuery();
            DefaultQueries.checkout.Create(query, items);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutCreate().checkout(),
                    response.checkoutCreate().userErrors(),
                    Poller.PollCheckoutReady,
                    callback
                );
            });
        }

        public void UpdateItems(
            string checkoutId, 
            List<CheckoutLineItemInput> lineItemsToAdd, 
            List<string> lineItemsToRemove,
            CompletionCallback callback
        ) {
            MutationQuery query = new MutationQuery();
            DefaultQueries.checkout.LineItemsRemove(query, checkoutId, lineItemsToRemove);
            DefaultQueries.checkout.LineItemsAdd(query, checkoutId, lineItemsToAdd);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutLineItemsAdd().checkout(),
                    response.checkoutLineItemsAdd().userErrors(),
                    Poller.PollCheckoutReady,
                    callback
                );
            });
        }

        public void SetShippingLine(
            string checkoutId, 
            string shippingRateHandle, 
            CompletionCallback callback
        ) {
            MutationQuery query = new MutationQuery();
            DefaultQueries.checkout.ShippingLineUpdate(query, checkoutId, shippingRateHandle);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutShippingLineUpdate().checkout(),
                    response.checkoutShippingLineUpdate().userErrors(),
                    Poller.PollCheckoutReady,
                    callback 
                );
            });
        }

        public void SetEmailAddress(string checkoutId, string email, CompletionCallback callback) {
            MutationQuery query = new MutationQuery();
            DefaultQueries.checkout.EmailUpdate(query, checkoutId, email);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutEmailUpdate().checkout(),
                    response.checkoutEmailUpdate().userErrors(),
                    Poller.PollCheckoutAvailableShippingRatesReady,
                    callback
                ); 
            });
        }

        public void SetShippingAddress(
            string checkoutId, 
            MailingAddressInput mailingAddressInput, 
            CompletionCallback callback
        ) {
            MutationQuery query = new MutationQuery();
            DefaultQueries.checkout.ShippingAddressUpdate(query, checkoutId, mailingAddressInput);

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutShippingAddressUpdate().checkout(),
                    response.checkoutShippingAddressUpdate().userErrors(),
                    Poller.PollCheckoutAvailableShippingRatesReady,
                    callback
                ); 
            });
        }

        public void SetFinalCheckoutFields(
            string checkoutId, 
            string email, 
            ShippingFields? shippingFields, 
            CompletionCallback callback
        ) {
            MutationQuery query = new MutationQuery();
            DefaultQueries.checkout.EmailUpdate(query, checkoutId, email);

            if (shippingFields.HasValue) {
                DefaultQueries.checkout.ShippingAddressUpdate(query, checkoutId, shippingFields.Value.ShippingAddress);
                DefaultQueries.checkout.ShippingLineUpdate(query, checkoutId, shippingFields.Value.ShippingIdentifier);
            }

            Client.Mutation(query, (Mutation response, ShopifyError error) => {
                if (error != null) {
                    callback(error);
                    return;
                }

                HandleCheckoutMutation(
                    response.checkoutEmailUpdate().checkout(),
                    response.checkoutShippingAddressUpdate().userErrors(),
                    Poller.PollCheckoutReady,
                    callback
                ); 
            });
        }

        private void HandleCheckoutMutation(
            Checkout newCheckout, 
            List<UserError> userErrors, 
            CheckoutPoll pollFinishedHandler,
            CompletionCallback callback
        ) {
            DidMutateCheckout(newCheckout, userErrors);

            if (userErrors.Count > 0) {
                ShopifyError error = new ShopifyError(
                    ShopifyError.ErrorType.UserError,
                    "There were issues with some of the fields sent. See `cart.UserErrors`"
                );
                callback(error);
                return;
            } 

            if (newCheckout.ready()) {
                callback(null);
            } else {
                Poller.PollCheckoutAndUpdate(newCheckout.id(), pollFinishedHandler, callback);
            }
        }
    }
}